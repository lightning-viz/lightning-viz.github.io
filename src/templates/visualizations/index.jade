extends ../layout


block content

    .top.bar


    .documentation-container
        .row
            .column-3.hidden-mobile.overview-container
                - var section = 'plots'
                include ../includes/visualizations/sidebar


            //- .column-1
            .column-3.hidden-mobile.empty-container
            .column-7.mobile-column-3.details-container
                header            
                    .row
                        .column-12
                            .row.header
                                .column-1.mobile-column-1
                                    img(src="/images/logo.png")

                                .column-10.mobile-column-3
                                    h1
                                        | Lightning

                                    | DATA VISUALIZATION SERVER


                section(name="introduction")
                    .row
                        .column-12
                                a(name="visualizations", href="#visualizations")
                                    h2
                                        | Visualizations
                

                section(name="plots")
                    .row
                        .column-12
                                a(name="plots", href="#plots")
                                    h2
                                        | Plots


                                a(name="scatter", href="#scatter")
                                    h4
                                        | Scatter

                                p
                                    | Scatter plots show collections of points. The primary data is an array of points, where each point is a two element-array with x and y coordinates. Optional specifications include color (or group label), alpha, and size. 


                                #scatter-iframe(data-pym, data-url="http://lightning-docs.herokuapp.com/visualizations/45/pym")


                                .tab-container
                                    ul
                                        li
                                            a(href="#scatter-data-tab")
                                                | Data Structure
                                        li
                                            a(href="#scatter-python-tab")
                                                | Python Example

                                    .content-container

                                        #scatter-data-tab
                                            pre
                                                code.
                                                    data = {
                                                        "points": [[x0,y0], [x1,y1], ... ]
                                                        "alpha": [0.2, 0.9, ...]
                                                        "color": [[r0,g0,b0], [10,20,0], ...]
                                                        "label": [l0, l1, ...]
                                                        "size": [s0, s1, ...]
                                                    }

                                        #scatter-python-tab

                                            pre
                                                code.
                                                    from numpy import random, ceil, array, clip

                                                    x = random.randn(100) * 15
                                                    y = random.randn(100) * 15
                                                    l = ceil(random.rand(100) * 5)
                                                    s = random.rand(100) * 20 + 5
                                                    a = clip(random.rand(100) + 0.1, 0, 1)

                                                    lgn.scatter(x, y, label=l, size=s, alpha=a)

                                a(name="line", href="#line")
                                    h4
                                        | Line

                                p
                                    | Line plots show one or more one-dimensional signals, and are commonly used to plot time series. The primary data is an array of series, where each series is a one-dimensional signal. Optional specifications include an axis (common to all lines), as well as line color (or group label), and size.



                                #line-iframe(data-pym, data-url="http://lightning-docs.herokuapp.com/visualizations/46/pym")


                                .tab-container
                                    ul
                                        li
                                            a(href="#line-data-tab")
                                                | Data Structure
                                        li
                                            a(href="#line-python-tab")
                                                | Python Example

                                    .content-container

                                        #line-data-tab
                                            pre
                                                code.
                                                    data = {
                                                        "series": [[0, 10, ...], [0, 20, ...], ...] or [0, 10, 20, …]
                                                        "axis": [0, 1, ...]
                                                        "color": [[r0,g0,b0], [r1,g1,b1], ...]
                                                        "label": [l0, l1, ...]
                                                        "size": [s0, s1, ...]
                                                    }

                                        #line-python-tab

                                            pre
                                                code.
                                                    from numpy import random
                                                    from scipy.ndimage.filters import gaussian_filter

                                                    x = random.randn(500)
                                                    x = gaussian_filter(x, 10)

                                                    lgn.line(x)

                                a(name="line-stacked", href="#line-stacked")
                                    h4
                                        | Line Stacked

                                p
                                    | A stacked line plot shows one or more one-dimensional signals alongside a minimap that lets you select arbitrary subsets of lines to display simultaneously. The input data is the same as for the normal line plot.


                                #stacked-line-iframe(data-pym, data-url="http://lightning-docs.herokuapp.com/visualizations/78/pym")

                                .tab-container
                                    ul
                                        li
                                            a(href="#line-stacked-data-tab")
                                                | Data Structure
                                        li
                                            a(href="#line-stacked-python-tab")
                                                | Python Example

                                    .content-container

                                        #line-stacked-data-tab
                                            pre
                                                code.
                                                    data = {
                                                        "series": [[0, 10, ...], [0, 20, ...], ...] or [0, 10, 20, …]
                                                        "axis": [0, 1, ...]
                                                        "color": [[r0,g0,b0], [r1,g1,b1], ...]
                                                        "label": [l0, l1, ...]
                                                        "size": [s0, s1, ...]
                                                    }

                                        #line-stacked-python-tab

                                            pre
                                                code.
                                                    from numpy import random
                                                    from scipy.ndimage.filters import gaussian_filter

                                                    y = gaussian_filter(random.rand(5,100), [0, 3])

                                                    lgn.linestacked(y, size=6)

                                a(name="force", href="#force")
                                    h4
                                        | Force

                                p
                                    | A force-directed graph is a useful way to visualize the structure of a network in a dynamic rendering. Nodes can be dragged to reorganize the network, and can be double clicked to highlight only the links to the selected node. The weight of lines between nodes indicates connection strength. The primary data is an array of nodes (usually just a list of linear indices, one per node) and an array of links, where each link is a three-element array with the source node index, target node index, and value. Optional specifications include node color (or group label) and size.


                                #force-iframe(data-pym, data-url="http://lightning-docs.herokuapp.com/visualizations/202/pym")
                                
                                .tab-container
                                    ul
                                        li
                                            a(href="#force-data-tab")
                                                | Data Structure
                                        li
                                            a(href="#force-python-tab")
                                                | Python Example

                                    .content-container

                                        #force-data-tab
                                            pre
                                                code.
                                                    data = {
                                                        "nodes": [0, 1, 2, ...] 
                                                        "links": [[source0, target0, value0], [source1, target1, value1], ...]
                                                        "color": [[r0,g0,b0], [r1,g1,b1], ...]
                                                        "label": [l0, l1, ...]
                                                        "size": [s0, s1, ...]
                                                    }

                                        #force-python-tab

                                            pre
                                                code.
                                                    import networkx as nx
                                                    from numpy import random

                                                    G = nx.random_regular_graph(3,n)
                                                    mat = nx.adjacency_matrix(G).todense()
                                                    l = (random.rand(n)*5).astype('int')
                                                    
                                                    lgn.force(mat, color=c)

                                a(name="graph", href="#graph")
                                    h4
                                        | Graph

                                p
                                    | A node-link graph is a static representation of a network where the spatial coordinates are specified along with the links are specified. Nodes can be clicked to highlight only the links to the selected node. The primary data is a list of nodes, and a list of links. Each node is a two-element array with an x and y coordinate, and each link is a three-element array with the source node index, target node index, and value (assuming nodes are indexed linearly). Optional specifications include node color (or group label) and size.

                                #graph-iframe(data-pym, data-url="http://lightning-docs.herokuapp.com/visualizations/130/pym")

                                .tab-container
                                    ul
                                        li
                                            a(href="#graph-data-tab")
                                                | Data Structure
                                        li
                                            a(href="#graph-python-tab")
                                                | Python Example

                                    .content-container

                                        #graph-data-tab
                                            pre
                                                code.
                                                    data = {
                                                        "nodes": [[x0,y0], [x1,y1], ... ]
                                                        "links": [[source0, target0, value0], [source1, target1, value1], ...]
                                                        "color": [[r0,g0,b0], [r1,g1,b1], ...]
                                                        "label": [l0, l1, ...]
                                                        "size": [s0, s1, ...]
                                                    }

                                        #graph-python-tab

                                            pre
                                                code.
                                                    from numpy import asarray, argmin
                                                    import networkx as nx

                                                    G = nx.random_geometric_graph(100, 0.2)
                                                    dists = [(x - 0.5)**2 + (y - 0.5)**2 for x, y in pos]
                                                    center = argmin(dists)
                                                    p = nx.single_source_shortest_path_length(G, center)
                                                    xy = asarray([pos[i,:] for i in p.keys()])
                                                    l = p.values()

                                                    lgn.graph(xy[:,0], xy[:,1], mat, label=l)

                                a(name="graph-bundled", href="#graph-bundled")
                                    h4
                                        | Graph Bundled

                                p
                                    | The bundled graph is similar to the node-link graph, but links are bundled using the algorithm from (link) to emphasize regions of the graph where there is dense connectivity. Nodes can be clicked to highlight only the links to the selected node. The input data is the same as for the normal graph. 

                                #graph-bundled-iframe(data-pym, data-url="http://lightning-docs.herokuapp.com/visualizations/132/pym")

                                .tab-container
                                    ul
                                        li
                                            a(href="#graph-bundled-data-tab")
                                                | Data Structure
                                        li
                                            a(href="#graph-bundled-python-tab")
                                                | Python Example

                                    .content-container

                                        #graph-bundled-data-tab
                                            pre
                                                code.
                                                    data = {
                                                        "nodes": [[x0,y0], [x1,y1], ... ]
                                                        "links": [[source0, target0, value0], [source1, target1, value1], ...]
                                                        "color": [[r0,g0,b0], [r1,g1,b1], ...]
                                                        "label": [l0, l1, ...]
                                                        "size": [s0, s1, ...]
                                                    }

                                        #graph-bundled-python-tab

                                            pre
                                                code.
                                                    import networkx as nx
                                                    from numpy import asarray

                                                    G = nx.random_geometric_graph(50, 0.5)
                                                    pos = asarray(nx.get_node_attributes(G, 'pos').values())
                                                    dists = [(x - 0.5)**2 + (y - 0.5)**2 for x, y in pos]
                                                    mat = nx.adjacency_matrix(G).todense()

                                                    lgn.graphbundled(pos[:,0], pos[:,1], mat)

                                a(name="matrix", href="#matrix")
                                    h4
                                        | Matrix

                                p
                                    | A matrix can be used to represent the values in any two-dimensional table of numbers. It renders the entries of the matrix as cells in a two-dimensional grid, with colors showing the relative values. The matrix can be panned and zoomed, and can be square or rectangle. The primary input data is a matrix which is a two-dimensional array containing the entries for each row and column. Optional specifications include the colormap used to display the values.


                                #matrix-iframe(data-url="http://lightning-docs.herokuapp.com/visualizations/171/pym", data-pym)
                                
                                .tab-container
                                    ul
                                        li
                                            a(href="#matrix-data-tab")
                                                | Data Structure
                                        li
                                            a(href="#matrix-python-tab")
                                                | Python Example

                                    .content-container

                                        #matrix-data-tab
                                            pre
                                                code.
                                                    data = {
                                                        "matrix": [[row0col0, row0col1, row0col2], [row1col0, row1col1, row1col2], ...]
                                                        "colormap": "colorbrewername"
                                                    }

                                        #matrix-python-tab

                                            pre
                                                code.
                                                    from numpy import random, array
                                                    
                                                    mat = random.random((10, 10))

                                                    lgn.matrix(mat, colormap="Blues")

                                a(name="adjacency", href="#adjacency")
                                    h4
                                        | Adjacency

                                p
                                    | An adjacency matrix is a special matrix meant to show the structure of a sparse network, especially one in which nodes in the network have been categorized into groups. It is a square matrix in which each row (and column) corresponds to a node, and the value in each cell (always positive) is the weight between a pair of nodes. If the matrix is binary the graph is unweighted; if the matrix is symmetric the graph is undirected. The primary input data is an array of nodes and an array of links. Similar to the force plot, the nodes are usually just a list of linear indices, and each link is a three-element array with the source node index, target node index, and value. Optional specifications include a group label for each node.

                                #adjacency-iframe(data-url="http://lightning-docs.herokuapp.com/visualizations/183/pym", data-pym)
                                

                                .tab-container
                                    ul
                                        li
                                            a(href="#adjacency-data-tab")
                                                | Data Structure
                                        li
                                            a(href="#adjacency-python-tab")
                                                | Python Example

                                    .content-container

                                        #adjacency-data-tab
                                            pre
                                                code.
                                                    data = {
                                                        "nodes": [0, 1, 2, ... ]
                                                        "links": [[source0, target0, value0], [source1, target1, value1], ...]
                                                        "label": [l0, l1, ...]
                                                    }

                                        #adjacency-python-tab

                                            pre
                                                code.
                                                    from sklearn import datasets
                                                    from numpy import corrcoef

                                                    d, l = datasets.make_blobs(n_features=5, n_samples=20, centers=5, cluster_std=1.0)
                                                    c = corrcoef(d)
                                                    c[c<0.75] = 0

                                                    lgn.adjacency(c, label=l)

                                a(name="map", href="#map")
                                    h4
                                        | Map

                                p
                                    | A map plot shows geographic regions filled with colors that reflect numerical values. You can produce maps of either the world (by specifying countries) or the united states (by specifying states). The primary input data is a list of regions and values. Each region is a string, either two letters (for US states) or three letters (for countries), and each value is a scalar. Optional specifications include a colormap used to display the values.

                                #map-iframe(data-url="http://lightning-docs.herokuapp.com/visualizations/38/pym", data-pym)

                                .tab-container
                                    ul
                                        li
                                            a(href="#map-data-tab")
                                                | Data Structure
                                        li
                                            a(href="#map-python-tab")
                                                | Python Example

                                    .content-container

                                        #map-data-tab
                                            pre
                                                code.
                                                    data = {
                                                        "regions": [“NY”, “CA”, “MA”, ... ]
                                                        "values": [v0, v1, v2, ...]
                                                        "colormap": “colorbrewername”
                                                    }

                                        #map-python-tab

                                            pre
                                                code.
                                                    from numpy import random

                                                    states = ["NA", "AK", "AL", "AR", "AZ", "CA", "CO","CT","DC","DE","FL","GA","HI","IA","ID","IL","IN","KS","KY","LA","MA","MD","ME","MI","MN","MO","MS","MT","NC","ND","NE","NH","NJ","NM","NV","NY","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VA","VI","VT","WA","WI","WV","WY"]
                                                    values = random.randn(len(states))

                                                    lgn.map(states, values, colormap="Blues")

                section(name="images")
                    .row
                        .column-12
                                a(name="images", href="/visualizations/images")
                                    h2
                                        | Images

                                a(href="/visualizations/images")
                                    h4
                                        | Click to view image-based visualizations

                                

                section(name="3d")
                    .row
                        .column-12
                                a(name="3d", href="/visualizations/3d")
                                    h2
                                        | 3D

                                a(href="/visualizations/3d")
                                    h4
                                        | Click to view 3d visualizations


                section(name="streaming")
                    .row
                        .column-12
                                a(name="streaming", href="/visualizations/streaming")
                                    h2
                                        | Streaming

                                a(href="/visualizations/streaming")
                                    h4
                                        | Click to view streaming visualizations
                
                section(name="linked")
                    .row
                        .column-12
                                a(name="linked", href="/visualizations/linked")
                                    h2
                                        | Linked

                                a(href="/visualizations/linked")
                                    h4
                                        | Click to view linked visualizations

                                

    .bottom.bar.visible-mobile