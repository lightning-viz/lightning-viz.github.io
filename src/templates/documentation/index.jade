extends ../layout


block content

    .top.bar


    .documentation-container
        .row
            .column-3.hidden-mobile.overview-container
                include ../includes/sidebar

            .column-3.hidden-mobile.empty-container
            .column-7.mobile-column-3.details-container

                section(name="introduction" style='margin-top: 20px')
                    .row
                        .column-12
                                a(name="introduction", href="#introduction")
                                    h2
                                        | Introduction

                                p
                                    | Lightning is a framework for interactive data visualization, including a server, visualizations, and client libraries. 

                                p 
                                    | The Lightning server provides API-based access to reproducible, web-based visualizations. It can be deployed in many ways, including Heroku, Docker, a public server, a local app for OS X and Linux — and even a server-less version well-suited to notebooks like Jupyter. It comes bundled with a core set of visualizations, but is built to support custom ones. 

                                p
                                    | Each visualization in Lightning is an 
                                    span.inline-code
                                        | npm
                                    |  module. This makes it easy to create new custom visualizations using all of your favorite 
                                    span.inline-code
                                        | npm
                                    |  libraries (see [below]). If you design a custom visualization and publish it to 
                                    span.inline-code
                                        | npm
                                    | , anyone can install it into their server. And if you've made something general-purpose, we can add it to the core set. 

                                p
                                    | Lightning can expose a single visualization to all the languages of data science. Client libraries are available in multiple languages, including 
                                    span.inline-code
                                        | python
                                    | , 
                                    span.inline-code
                                        | scala
                                    | , 
                                    span.inline-code
                                        | node.js
                                    | , and 
                                    span.inline-code
                                        | r
                                    | , with more coming soon. If you want to contribute a client for your favorite language, let us know [chatroom].

                                p 
                                    | To see examples of the types of visualizations that Lightning can produce, check out the examples in the sidebar. To learn how to visualize your own data with Lightning, continue reading here.
                
                section(name="getting-started")
                    .row
                        .column-12
                                a(name="getting-started", href="#getting-started")
                                    h2
                                        | Getting started

                                p
                                    | We've designed many ways to use Lightning, to support a variety of use cases. The options fall into three categories: use a prebuilt server, run your own server, or use locally without a server. Here we introduce the approaches; see individual sections below for more details.

                                p 
                                    | The prebuilt servers are the easiest way to get started with Lightning. You can use our public server  at [http://public.lightning-viz.org] to generate and share any of the core Lightning visualization types, or download the standalone app, which is perfect for doing local data analysis.
                                div
                                    span.method-item
                                        | public
                                    span.method-item
                                        | linux 64
                                    span.method-item
                                        | os x
                                br
                                p 
                                    | Deploying your own server provides the most control and flexibility. You'll be able to view and edit visualizations, install and manage visualization types, and prototype new ones. You can use a one-click deployment to Heroku, run from our official Docker images, or install and run locally using 
                                    span.inline-code
                                        | node
                                    |  and 
                                    span.inline-code
                                        | npm
                                div
                                    span.method-item
                                        | heroku
                                    span.method-item
                                        | docker
                                    span.method-item
                                        | node
                                br
                                p 
                                    | You can also use Lightning without running a server at all through our client libraries (currently only Python). Just by installing the client you have access to Lightning's custom visualizations. This approach is great for data science applications, especially inside of notebooks, but has a few limitations. See the section on the Python client for more.
                                div
                                    span.method-item
                                        | python

                section(name="prebuilt-server")
                    .row
                        .column-12
                                a(name="prebuilt-server", href="#prebuilt-server")
                                    h2
                                        | Use a prebuilt server

                                p
                                    | This is the easiest way to get started, and there are a couple options depending on your use case.

                                a(name="public", href="#public")
                                    h4
                                        | Public
                                    p
                                        | [[FILL IN]] explain the public server, where to access, example in Python, limitations (can't manage visualization types), free (but no guarentees), will be kept up to date.

                                a(name="standalone", href="#standalone")
                                    h4
                                        | Standalone app
                                    p
                                        | [[FILL IN]] Explain the apps, where to download, how to install, where to access once installed, local only, great for testing and prototyping new visualizations, but links can't be shared.

                section(name="deploy-server")
                    .row
                        .column-12
                                a(name="deploy-server", href="#deploy-server")
                                    h2
                                        | Deploy your own server

                                p
                                    | Deploying your own Lightning server gives you maximum control and flexibility, and there are many ways to do it.

                                a(name="heroku", href="#heroku")
                                    h4
                                        | Heroku

                                p
                                    | Hosting a server on Heroku is free and easy, but you must have a Heroku account (Sign up for one 
                                    a(href="https://signup.heroku.com/identity")
                                        | here
                                    |). Once you have an account, just click this “deploy to Heroku button” (also found on the project README on GitHub):
                                

                                p
                                    <a href="https://dashboard.heroku.com/new?template=https%3A%2F%2Fgithub.com%2Flightning-viz%2Flightning&button-url=https%3A%2F%2Fgithub.com%2Flightning-viz%2Flightning"><img src="https://camo.githubusercontent.com/c0824806f5221ebb7d25e559568582dd39dd1170/68747470733a2f2f7777772e6865726f6b7563646e2e636f6d2f6465706c6f792f627574746f6e2e706e67" alt="Deploy" data-canonical-src="https://www.herokucdn.com/deploy/button.png" style="max-width:100%;"></a>

                                p
                                    | The default options are fine for quick testing, but others are available for advanced usage:

                                    ul
                                        li
                                            span.inline-code
                                                    | LIGHTNING_USERNAME
                                            | , 
                                            span.inline-code
                                                    | LIGHTNING_PASSWORD

                                        |   If these values are provided, lightning will run behind HTTP basic authentication with the provided username and password. Note that public links (for sessions, or individual visualizations) can be shared and are accessible without credentials.
                                        li
                                            br
                                        li
                                            span.inline-code
                                                | S3_BUCKET
                                            | , 
                                            span.inline-code
                                                | S3_KEY
                                            | , 
                                            span.inline-code
                                                | S3_SECRET
                                        |   If these values are provided lightning will use s3 to store user uploaded images. Note that because of Heroku restrictions if these are not provided, user uploaded images will periodically be deleted.

                                p
                                    | You may also want to upgrade to Heroku's paid-tier for improved performance.

                                a(name="docker", href="#docker")
                                    h4
                                        | Docker

                                    p
                                        | [[FILL IN]] Describe running a server with Docker, where to get the official image, how to run and access on OS X or Linux, how to customize with docker compose


                                a(name="local-server", href="#local-server")
                                    h4
                                        | Node

                                p
                                    | You can also run your own server just using 
                                    span.inline-code
                                        | node
                                    |  and 
                                    span.inline-code
                                        | npm
                                    | . First, download 
                                    span.inline-code
                                        | node
                                    a(href='http://nodejs.org')
                                        |  here
                                    | , or use a version manager such as 
                                    a(href="https://github.com/creationix/nvm")
                                        | nvm
                                    |  (recommended). Then, you can either install and run an executable

                                pre
                                    code
                                        | $ npm install -g lightning-server
                                        | $ lightning-server


                                p
                                    | or clone the lightning repository and install the server

                                pre
                                    code
                                        | $ git clone git@github.com:lightning-viz/lightning.git
                                        | $ cd lightning
                                        | $ npm install

                                p
                                    | and start it with:

                                pre
                                    code
                                        | $ npm start
                                p

                                    | Both options should start a server at 
                                    
                                    a(href="http://localhost:3000", target="_blank")
                                        | http://localhost:3000
                                    
                                    |. 

                                h5
                                    | Using Postgres

                                p

                                p
                                    | The default SQLite database should be suitable for development purposes, but in production you may want to use Postgres. To start using Postgres with lightning, do the following: 

                                ul.styled
                                    li
                                        | Change your 
                                        a(href="https://github.com/lightning-viz/lightning/blob/master/config/database.js#L16")
                                            | database config 
                                        | from `sqlite` to `postgres`.
                                    li
                                        | Make sure postgres is installed and a server is running. On OSX we recommend using 
                                        a(href="http://postgresapp.com/")
                                            | Postgres.app.

                                p
                                p
                                    | Then run the following to initialize the database:

                                pre
                                    code
                                        | $ npm run createdb
                                        | $ npm run migrate

                                p
                                    | Start the lightning server as described above. Lightning will now be running using Postgres.

                section
                    .row
                        .column-12
                                
                                a(name="creating", href="#creating")
                                    h2
                                        | Creating a visualization

                                p
                                    | Once you have a server, you can use it to create visualizations. Here we describe the three most common ways: directly from the server, from a client library, or from the REST API.

                                a(name="direct", href="#direct")
                                    h4
                                        | From the server

                                    p
                                        | Navigate to your lightning host, and create a new session. Then, click “create visualization”

                                    .screenshot
                                        img(src="/images/screenshots/1.png")
                                    p
                                        | Select the “line” type, and enter  
                                        span.inline-code 
                                            | {"series": [1, 1, 2, 3, 5, 8]}
                                        | .
                                        | NOTE: the data must be a properly formed JSON object.

                                    .screenshot
                                        img(src="/images/screenshots/2.png")
                                    p
                                        | Submit the form and you should see a line plot of that data.

                                    .screenshot
                                        img(src="/images/screenshots/3.png")
                                    p
                                        | To create a choropleth map, select “map” type and enter  
                                        span.inline-code 
                                            | {"regions": ["MI", "NY", "NM"], "values": [0.6, 0.3, 0.2]}
                                        | . This should create a map of the United States showing Michigan, New York, and New Mexico filled in at different color scales.


                                    .screenshot
                                        img(src="/images/screenshots/4.png")

                                a(name="client", href="#client")
                                    h4
                                        | From a client

                                p
                                    | The client libraries make it easy to generate visualizations straight your favorite data analysis environment, including from within interactive notebooks. This is the most common way to generate visualizations. 

                                p 
                                    | We'll walk through an example using the Python client, see below to read more about the other client libraries. [[UPDATE GRAPHIC?]]
                            
                                .screenshot
                                    img(src="/images/screenshots/5.png")

                                p
                                    | [[UPDATE CODE EXAMPLES]] To install the Python client from PyPi, just call


                                pre
                                    code
                                        | $ pip install lightning-python

                                p
                                    | Then, in Python, import the library and instantiate a lightning object:

                                pre
                                    code.python
                                        | from lightning import Lightning
                                        | lgn = Lightning()
                                p
                                    | By default the client assumes that the host is at 
                                    a(href='http://localhost:3000')
                                        | http://localhost:3000
                                    | ; if you want to use a remote server pass it in during instantiation, as in

                                pre
                                    code.python
                                        | from lightning import Lightning
                                        | lgn = Lightning(host='https://public.lightning-viz.org')

                                p
                                    | or

                                pre
                                    code.python
                                        | from lightning import Lightning
                                        | lgn = Lightning(host='https://herokuappname.herokuapp.com')

                                p
                                    | Once you have instantiated the lightning object, try running:

                                pre
                                    code
                                        | lgn.create_session(‘hello world’)

                                p
                                    | This line tells Lightning to create a new “session” named Hello World. Try navigating in your browser to the session you just created (open the sidebar, click “all sessions”, click the one named “hello world”)

                                    | You should see that this session has no data yet. To create a line plot call


                                pre
                                    code.python
                                        | lgn.line([1, 1, 2, 3, 5, 8])

                                .screenshot
                                    img(src="/images/screenshots/6.png")
                                p
                                    | and a line plot should be displayed in your browser. 

                                .screenshot
                                    img(src="/images/screenshots/7.png")


                                p
                                    | To view all of the available commands see the 
                                    a(href="http://lightning-viz.github.io/lightning-python/")
                                        | lightning-python documentation page
                                    | .


                                a(name="rest", href="#rest")
                                    h4
                                        | Using the REST API

                                p
                                    | It's also possible to generate visualizations directly using Lightning's REST API.

                                p
                                    | [[FILL IN] Brief overview, methods, example 


                section
                    .row
                        .column-12
                                
                                a(name="clients", href="#clients")
                                    h2    
                                        | Client libraries

                                p
                                    | [[FILL IN]] This should probably just provide an overview of each client, where to find documentation, and for the Python client a description of the headless mode.

                                a(name="python", href="#python")
                                    h4    
                                        | Python

                                p
                                    | The Python client...

                                a(name="scala", href="#scala")
                                    h4    
                                        | Scala

                                p
                                    | The Scala client...

                                a(name="nodejs", href="#nodejs")
                                    h4    
                                        | node.js

                                p
                                    | The node client...

                                a(name="rstats", href="#rstats")
                                    h4    
                                        | R

                                p
                                    | The R client...


                section
                    .row
                        .column-12
                                
                                a(name="sharing", href="#sharing")
                                    h2    
                                        | Sharing visualizations

                                p
                                    | Lightning makes it easy to share your visualizations with others.

                                a(name="links", href="#links")
                                    h4    
                                        | Links

                                p
                                    | [[FILL IN]] Explain where to get links to visualizations and how to add descriptions in markdown?

                                a(name="iframes", href="#iframes")
                                    h4    
                                        | iFrames

                                p
                                    | Lightning provides permalinks for each visualization that can easily be embedded on other sites (particularly these are meant to be embedded using iframes).

                                p
                                    | To embed a visualization, use the url format


                                pre
                                    code
                                        | http://&lt;host&gt;/visualizations/&lt;visualization-id&gt;/iframe/


                                p
                                    | To determine the ID of the visualization, navigate to the visualization’s permalink and inspect the URL, or if using python

                                pre
                                    code.python
                                        | viz = lgn.line([1,1,2,3,5,8])
                                        | print viz.id

                                p
                                    | Then embed the visualization in your own webpage with

                                pre
                                    code.html
                                        | &lt;iframe src=”http://host/visualizations/vid/iframe” width="N PIXELS" height="N PIXELS" &gt;

                                p
                                    | making sure to replace host and vid with the proper values.

                                p 
                                    | For example:

                                .iframe-block
                                    iframe(src="https://lightning-docs.herokuapp.com/visualizations/5/iframe/", width="300", height="180")

                                p
                                    | is produced by the following
                                
                                pre
                                    code.html
                                        | &lt;iframe src="https://lightning-docs.herokuapp.com/visualizations/5/iframe/" width="300" height="300" &gt;

                                a(name="pym", href="#pym")
                                    h4    
                                        | Pym.js

                                p
                                    | If you prefer to use 
                                    a(href="http://blog.apps.npr.org/pym.js")
                                        | pym.js
                                    |  we offer an endpoint for that as well:

                                pre
                                    code
                                        | http://&lt;host&gt;/visualizations/&lt;visualization-id&gt;/pym/


                                p
                                    | the child script is automatically initialized, so you only have to worry about setting up the parent.

                                p
                                    | For example [[THIS IS NOT WORKING?]]:

                                #pym-example-iframe(data-pym, data-url="http://lightning-docs.herokuapp.com/visualizations/5/pym")

                section
                    .row
                        .column-12
                                
                                a(name="custom", href="#custom")
                                    h2    
                                        | Customizing

                                p
                                    | There are many ways to both customize the set of visualizations included with your server, and develop entirely new ones.

                                a(name="managing", href="#managing")
                                    h4
                                        | Managing

                                p
                                    | [[FILL IN]] How to install and manage visualizations

                                a(name="developing", href="#developing")
                                    h4
                                        | Developing

                                p
                                    | [[FILL IN]] [[REWRITE THE BELOW]]

                                p
                                    | In addition to Lightning’s core visualization types, users can easily develop their own plots, either by modifying the existing ones, or designing visualizations from scratch. This section serves as a walkthrough to create a custom visualization.

                                p
                                    | A visualization consists of a folder containing several files:

                                    ul.styled
                                        li
                                            | index.js (required) - the main javascript file, responsible for building and displaying the visualization
                                        li
                                            | sample-data.json / sample-images.json (required) - sample data to be used when previewing this visualization type

                                        li
                                            | style.scss (optional) - optional scss styles to be applied

                                        li
                                            | &lt;visualization-name&gt;.jade (optional) - a markup file for any html that is needed


                                p
                                    | each of these are discussed in detail below.


                                a(name="custom-index", href="#custom-index")
                                    h4
                                        | index.js

                                p
                                    | The `index.js` file must export a javascript object that exposes a few basic functions. In general the template for the index.js file looks like this (using common.js syntax):

                                pre
                                    code.javascript.
                                        /*
                                         * Import any necessary libraries. All visualizations already have access to jQuery
                                         * through $
                                         */
                                        var d3 = require(‘d3’);
                                        var _ = require(‘lodash’);


                                        /*
                                         * Initialize a new visualization and call the internal _init function
                                         */
                                        var MyCustomViz = function(selector, data, images, opts) {
                                            this.opts = opts || {};

                                            this.width = (opts.width || $(selector).width()) - margin.left - margin.right;
                                            this.height = (opts.height || (this.width * 0.6)) - margin.top - margin.bottom;

                                            this.data = this._formatData(data);
                                            this.selector = selector;
                                            this._init();
                                        };

                                        /*
                                         * Initialize the visualization. This is kept separate by convention to make it easy
                                         * to inherit from other visualization types.
                                         */
                                        MyCustomViz.prototype._init = function() {
                                            // draw the actual visualization here
                                            // e.g.
                                            var svg = d3.select(this.selector)
                                                    .append(‘svg:svg’)
                                            
                                            // etc.
                                        }

                                        /*
                                         * Take the provided data and return it in whatever data format is needed
                                         */
                                        MyCustomViz.prototype._formatData = function(data) {
                                           var transformedData = data;

                                           // …
                                           // transform the data into whatever form you need here
                                           // …
                                           
                                            return transformedData;
                                           
                                        }

                                        /*
                                         * Optional function, use this if you want to users to send updated data to this plot
                                         */
                                        MyCustomViz.prototype.updateData = function(data) {
                                            this.data = this._formatData(data);
                                            // then update the visualization
                                        }

                                        /*
                                         * Optional function, use this if you want to enable streaming updates to this plot
                                         */
                                        MyCustomViz.prototype.appendData = function(data) {
                                            this.data = this.data.concat(this._formatData(data));
                                            // then update the visualization
                                        }


                                        module.exports = MyCustomViz;


                                a(name="custom-data", href="#custom-data")
                                    h4
                                        | sample-data.json

                                p
                                    | This is simply a json file that contains an array of example data in the required format, e.g.

                                pre
                                    code.
                                        [{
                                            “name”: “first example data set”,
                                            “data”: {/* json representation of your data*/}
                                        }, {
                                           “name”: “second example data set”,
                                            “data”: {/* json representation of your data*/}
                                        }]


                                a(name="custom-image", href="#custom-images")
                                    h4
                                        | sample-images.json

                                p
                                    | If your plot displays images, create this file, and fill it with an array of test image URLs, e.g.

                                pre
                                    code.
                                        [
                                            "http://i.gif.fm/janelia-images/stack/0000",
                                            "http://i.gif.fm/janelia-images/stack/0001",
                                            "http://i.gif.fm/janelia-images/stack/0002",
                                            "http://i.gif.fm/janelia-images/stack/0003"
                                        ]

                                a(name="custom-style", href="#custom-style")
                                    h4
                                        | style.scss

                                p
                                    | An SCSS file for any styles that you wish to be applied to your visualization. The current version does not automatically scope this, so you should be careful to scope it to only your visualizations:

                                pre
                                    code.
                                        .my-visualization-class {
                                            path {
                                                stroke: black;
                                            }
                                            // etc.
                                        }

                                
                                a(name="custom-template", href="#custom-template")
                                    h4
                                        | &lt;visualization-name&gt;.jade

                                p
                                    | This is a jade file that can be required in index.js. Note: the name of the file must be the same as the name of the project. For example, the gallery visualization is named gallery.jade and has a markdown file that looks like

                                pre
                                    code.
                                        .gallery-viz
                                            .row
                                                .gallery-container
                                                    for image in images
                                                        .gallery-thumbnail
                                                            img(src="#{image}_small")

                                            .row
                                                .gallery-full
                                                    .image-container

                                p
                                    | then in index.js 
                                pre
                                    code.
                                        var markup = require(‘./gallery.jade’);
                                        var templateVars = {};
                                        var compiledHTML = markup();

                                        // the compiledHTML can then be appended to the visualization

                                
                                a(name="custom-link", href="#custom-link")
                                    h4
                                        | Linking Plot Types

                                p
                                    | Lightning’s plots are designed so that several visualization types can be linked together relatively easily. For example, the following code shows how the relevant parts of how the “scatter-line” type to builds a visualization containing both a line plot and a scatter plot. The line plot updates with new data every time a user hovers on a point in the scatter plot.

                                pre
                                    code.

                                        var ScatterLine = function(selector, data, images, options) {

                                            var Scatter = require('../viz/scatter');
                                            var scatter = new Scatter(selector + ' #scatter-plot', data, null, {width: $(selector).width(), height: Math.min(500, $(selector).width * 0.6)});
                                            var Line = require('../viz/line');
                                            var line = new Line(selector + ' #line-plot');

                                            // ...


                                            scatter.on('hover', function(d) {
                                                // ...
                                                // get newData
                                                // ... 

                                                line.updateData(newdata);   
                                            });
                                        };

                                        module.exports = ScatterLine;

                                p
                                    | the lightning-client-utils module provides several utility functions, e.g. pulling new data down from the server. This is discussed more in a later section.


                                a(name="custom-inherit", href="#custom-inherit")
                                    h4
                                        | Inheriting from other plot types

                                p
                                    | To inherit behavior from an existing plot, the following convention is used:

                                pre
                                    code.
                                        var inherits = require('inherits');
                                        var SomeExistingPlot = require(‘../viz/some-existing-plot’);

                                        var MyInheritingPlot = funtion(selector, data, images, opts) {
                                            this.opts = opts || {};

                                            this.width = (opts.width || $(selector).width()) - margin.left - margin.right;
                                            this.height = (opts.height || (this.width * 0.6)) - margin.top - margin.bottom;

                                            this.data = this._formatData(data);
                                            this.selector = selector;
                                            this._init();
                                        }

                                        inherits(MyInheritingPlot, SomeExistingPlot);

                                        // now override any methods you wish to change
                                        // e.g.

                                        MyInheritingPlot.prototype.appendData = function(data) {
                                            var newData = this._formatData(data);
                                            // now do something different with the data
                                        }

                                a(name="prototype-locally", href="#prototype-locally")
                                    h4
                                        | Prototyping custom plots locally                                     

                                p
                                    | If you are running a local Lightning server, you can go to:

                                pre
                                    code. 
                                        http://localhost:3000/visualization-types/preview/full/?path=/path/to/viz/my-vis

                                p
                                    | this will render whatever visualization is inside the folder  
                                    span.inline-code 
                                        | my-vis
                                    |  assuming that the visualization conforms to the basic structure for a Lightning visualization type.

                                p
                                    | This approach can be useful designing and debugging visualizations locally. For live, light-weight editing the built-in Lightning visualization editor is your friend.
                                
                                //- a(name="custom-utils", href="#custom-utils")
                                //-     h4
                                //-         | lightning-client-utils

                                //- p
                                //-     | The lightning client utilities module exposes a few useful functions for interacting with the lightning server from the browser.



    .bottom.bar.visible-mobile
