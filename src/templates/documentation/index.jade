extends ../layout


block content

    .top.bar


    .documentation-container
        .row
            .column-3.hidden-mobile.overview-container
                include ../includes/documentation/sidebar

            //- .column-1
            .column-3.hidden-mobile.empty-container
            .column-7.mobile-column-3.details-container
                header            
                    .row
                        .column-12
                            .row.header
                                .column-1.mobile-column-1
                                    img(src="/images/logo.png")

                                .column-10.mobile-column-3
                                    h1
                                        | Lightning

                                    | DATA VISUALIZATION SERVER


                section(name="introduction")
                    .row
                        .column-12
                                a(name="introduction", href="#introduction")
                                    h2
                                        | Introduction

                                p
                                    | Lightning is a data-visualization server providing API-based access to reproducible, web-based, interactive visualizations. It includes a core set of visualization types, but is built for extendability and customization. Lightning supports modern libraries like d3.js and three.js, and is designed for interactivity over large data sets and continuously updating data streams.

                                p 
                                    | To see examples of the types of visualizations that lightning can produce, check out the 
                                    a(href="/visualizations") 
                                        | visualizations page
                                    | . To learn how to visualize your own data with lightning, continue reading here.
                                p
                                    | To start producing visualizations, you just need two things: (1) a running instance of a lightning server, and (2) a way to send data to the server. These instructions show you how to get both.

                
                section(name="server")
                    .row
                        .column-12
                                a(name="server", href="#server")
                                    h2
                                        | Launching a server


                                a(name="heroku", href="#heroku")
                                    h4
                                        | Heroku

                                p
                                    | The easiest way to start a server is by hosting it on Heroku. This is free, but you must have a Heroku account (Sign up for one 
                                    a(href="https://signup.heroku.com/identity")
                                        | here
                                    |).
                                p
                                    | Once you have an account, simply navigate to the github README, and click the “deploy to Heroku button”, or click the button below:
                                

                                p
                                    <a href="https://dashboard.heroku.com/new?template=https%3A%2F%2Fgithub.com%2Flightning-viz%2Flightning&button-url=https%3A%2F%2Fgithub.com%2Flightning-viz%2Flightning"><img src="https://camo.githubusercontent.com/c0824806f5221ebb7d25e559568582dd39dd1170/68747470733a2f2f7777772e6865726f6b7563646e2e636f6d2f6465706c6f792f627574746f6e2e706e67" alt="Deploy" data-canonical-src="https://www.herokucdn.com/deploy/button.png" style="max-width:100%;"></a>

                                p
                                    | The default options are fine for quick testing, but others are available for more advanced usage.

                                h6
                                    | Advanced Options

                                p
                                    | There are several options provided for advanced usage:

                                    ul
                                        li
                                            span.inline-code
                                                    | LIGHTNING_USERNAME
                                            | , 
                                            span.inline-code
                                                    | LIGHTNING_PASSWORD

                                            | -  if these values are provided, lightning will run behind HTTP basic authentication with the provided username and password. Note that public links (for sessions, or individual visualizations) can be shared and are accessible without credentials.
                                        li
                                            br
                                        li
                                            span.inline-code
                                                | S3_BUCKET
                                            | , 
                                            span.inline-code
                                                | S3_KEY
                                            | , 
                                            span.inline-code
                                                | S3_SECRET
                                            | - if these values are provided lightning will use s3 to store user uploaded images. Note that because of Heroku restrictions if these are not provided, user uploading images will periodically be deleted.


                                a(name="local-server", href="#local-server")
                                    h4
                                        | Local Server

                                p
                                    | In order to run a local server, the following dependencies must first be installed:

                                    ul.styled
                                        li
                                            b
                                                | node.js
                                            |  - download 
                                            a(href="http://nodejs.org/")
                                                | here
                                            | , or use a version manager such as 
                                            a(href="https://github.com/creationix/nvm")
                                                | nvm
                                            |  (recommended).
                                        li
                                            b
                                                | gulp
                                            |  - once node is installed run 
                                            span.inline-code
                                                | npm install -g gulp
                                            |  to install. This command may need sudo depending on your nodejs installation. 

                                p
                                    | Once the above dependencies are resolved, clone the lightning repository and install the server. 

                                pre
                                    code
                                        | $ git clone git@github.com:lightning-viz/lightning.git
                                        | $ cd lightning
                                        | $ npm install

                                p
                                    | finally compile the static assets:

                                pre
                                    code
                                        | $ gulp build

                                p
                                    | and run the server
                                
                                pre
                                    code
                                        | $ npm start
                                p

                                    | This should start a server at 
                                    
                                    a(href="http://localhost:3000", target="_blank")
                                        | http://localhost:3000
                                    
                                    |. 

                                h6
                                    | Using Postgres

                                p

                                p
                                    | For larger data sets using Postgres will be more efficient than the
                                    | default SQLite database.

                                p
                                    | To start using Postgres with lightning, do the following: 

                                ul.styled
                                    li
                                        | Change your 
                                        a(href="https://github.com/lightning-viz/lightning/blob/master/config/database.js#L16")
                                            | database config 
                                        | from `sqlite` to `postgres`.
                                    li
                                        | Make sure postgres is installed and a server is running. On OSX we recommend using 
                                        a(href="http://postgresapp.com/")
                                            | Postgres.app.

                                p
                                p
                                    | Then run the following to initialize the database:

                                pre
                                    code
                                        | $ npm run createdb
                                        | $ npm run migrate

                                p
                                    | Start the lightning server as described above. Lightning will now be running using Postgres.


                                a(name="first-viz", href="#first-viz")
                                    h4
                                        | Creating Your First Visualization

                                p
                                    | Navigate to your lightning host, and create a new session.


                                p
                                    | Then, click “create visualization”

                                .screenshot
                                    img(src="/images/screenshots/1.png")
                                p
                                    | Select the “line” type, and enter 
                                    span.inline-code 
                                        | {"series": [1, 1, 2, 3, 5, 8]}
                                    | .
                                    | NOTE: the data must be a properly formed JSON object.

                                .screenshot
                                    img(src="/images/screenshots/2.png")
                                p
                                    | Submit the form and you should see a line plot of that data.

                                .screenshot
                                    img(src="/images/screenshots/3.png")
                                p
                                    | To create a choropleth map, select “map” type and enter 
                                    span.inline-code 
                                        | {"regions": ["MI", "NY", "NM"], "values": [0.6, 0.3, 0.2]}
                                    | . This should create a map of the United States showing Michigan, New York, and New Mexico filled in at different color scales.


                                .screenshot
                                    img(src="/images/screenshots/4.png")

                                p 
                                    | This method works for all data visualization types, but generally it is preferable to interact through an API client. To learn how to use the python client, continue below.

                section
                    .row
                        .column-12
                                
                                a(name="python", href="#python")
                                    h2    
                                        | Using with Python

                                p
                                    | The 
                                    a(href="http://lightning-viz.github.io/lightning-python/")
                                        | python client 
                                    |  makes it easy to generate interactive visualizations from Python, and 
                                    a(href="http://nbviewer.ipython.org/github/lightning-viz/lightning-example-notebooks/blob/master/plots/scatter.ipynb") 
                                        | embed them within an iPython notebook
                                    | . The client provides access to all of 
                                    a(href="/visualizations")
                                        | Lightning’s core visualizations.


                                .screenshot
                                    img(src="/images/screenshots/5.png")

                                a(name="install-python", href="#install-python")
                                    h4
                                        | Installation

                                p
                                    | The python client can be found on github here. It can be installed from pypi by running


                                pre
                                    code
                                        | $ pip install lightning-python

                                p
                                    | Alternatively if you would like to install directly from the github repo, run the following commands:

                                pre
                                    code
                                        | $ git clone git@github.com:lightning-viz/lightning-python.git
                                        | $ cd lightning-python
                                        | $ sudo pip install -e .


                                a(name="initialize-python", href="#initialize-python")
                                    h4
                                        | Initializing the Client

                                p
                                    | To use lightning with a local server, simply import the library and instantiate a lightning object:


                                pre
                                    code.python
                                        | from lighting import Lightning
                                        | lgn = Lightning()
                                p
                                    | If you are using a remote server (e.g. Heroku), pass in the `host` during instantiation


                                pre
                                    code.python
                                        | from lightning import Lightning
                                        | lgn = Lighting(host=’https://<herokuappname>.herokuapp.com’)


                                a(name="plotting-python", href="#plotting-python")
                                    h4
                                        | Creating Plots

                                p
                                    | The python client provides methods to plot data in the browser using all of lightning’s standard visualization types. The first thing to do is create a session (a session is simply a group or a feed of data visualizations - this is how lightning knows where to display the data).


                                p
                                    | Once you have instantiated the lightning object, try running:

                                pre
                                    code
                                        | lgn.create_session(‘hello world’)

                                p
                                    | This line tells lightning to create a new “session” named Hello World. Try navigating in your browser to the session you just created (open the sidebar, click “all sessions”, click the one named “hello world”)

                                    | You should see that this session has no data yet. To create a line plot call


                                pre
                                    code.python
                                        | lgn.line([1, 1, 2, 3, 5, 8])

                                .screenshot
                                    img(src="/images/screenshots/6.png")
                                p
                                    | and a line plot should be displayed in your browser. 

                                .screenshot
                                    img(src="/images/screenshots/7.png")


                                p
                                    | To view all of the available commands see the 
                                    a(href="http://lightning-viz.github.io/lightning-python/")
                                        | lightning-python documentation page
                                    | .




                                a(name="ipython", href="#ipython")
                                    h4
                                        | IPython

                                p
                                    | Lightning aims to be fully compatible for use within the IPython notebook. To use in a notebook, simply pass in the ipython flag during instantiation:

                                pre
                                    code.python
                                        | from lightning import Lightning
                                        | lgn = Lightning(ipython=True)
                                
                                p
                                    | and plot normally.


                                a(name="docs-python", href="#docs-python")
                                    h4
                                        | Full Docs

                                p
                                    a(href="http://lightning-viz.github.io/lightning-python/")
                                        | The full documentation for the python library can be found here.

                section
                    .row
                        .column-12
                                
                                a(name="embed", href="#embed")
                                    h2    
                                        | Embedding Plots

                                a(name="iframes", href="#iframes")
                                    h4    
                                        | iFrames

                                p
                                    | Lightning provides permalinks for each visualizations that can easily be embedded on other sites (particularly these are meant to be embedded using iframes).

                                p
                                    | To embed a visualization, use the url format


                                pre
                                    code
                                        | http://&lt;host&gt;/visualizations/&lt;visualization-id&gt;/iframe/


                                p
                                    | To determine the ID of the visualization, navigate to the visualization’s permalink and inspect the URL, or if using python

                                pre
                                    code.python
                                        | viz = lgn.line([1,1,2,3,5,8])
                                        | print viz.id

                                p
                                    | Then embed the visualization in your own webpage with

                                pre
                                    code.html
                                        | &lt;iframe src=”http://host/visualizations/vid/iframe” width="WIDTH IN PIXELS" height="HEIGHT IN PIXELS" &gt;

                                p
                                    | making sure to replace host and vid with the proper values.

                                p 
                                    | For example:

                                .iframe-block
                                    iframe(src="https://lightning-docs.herokuapp.com/visualizations/5/iframe/", width="300", height="180")

                                p
                                    | is produced by the following
                                
                                pre
                                    code.html
                                        | &lt;iframe src="https://lightning-docs.herokuapp.com/visualizations/5/iframe/" width="300" height="300" &gt;

                                a(name="pym", href="#pym")
                                    h4    
                                        | Pym.js

                                p
                                    | If you prefer to use 
                                    a(href="http://blog.apps.npr.org/pym.js")
                                        | pym.js
                                    |  we offer an endpoint for that as well:

                                pre
                                    code
                                        | http://&lt;host&gt;/visualizations/&lt;visualization-id&gt;/pym/


                                p
                                    | the child script is automatically initialized, so you only have to worry about setting up the parent.

                                p
                                    | For example:

                                #pym-example-iframe(data-pym, data-url="http://lightning-docs.herokuapp.com/visualizations/5/pym")







                section
                    .row
                        .column-12
                                
                                a(name="editor", href="#editor")
                                    h2    
                                        | Editor

                                p
                                    | The lightning server ships with a build in editor for tinkering with the visualization code. The editor provides a live preview of the changes that 
                                    | are made to the code.

                                .screenshot
                                    img(src="/images/screenshots/8.png")


                                a(name="editor-basics", href="#editor-basics")
                                    h4
                                        | Editor Basics

                                .screenshot
                                    img(src="/images/screenshots/9.gif")

                                p
                                    | The following keyboard shortcuts are used to interact with the editor:

                                    ul.styled
                                        li
                                            span.inline-code
                                                |  ctrl + enter
                                            |  - evaluate code

                                        li
                                            span.inline-code
                                                |  ctrl + s

                                            |  - save changes

                                    | the editor can be used to change any of the 
                                    b
                                        | javascript
                                    | , 
                                    b 
                                        | stylesheets
                                    | , and 
                                    b
                                        | example data.


                                a(name="editor-import", href="#editor-import")
                                    h4
                                        | Importing

                                p
                                    | Custom visualization types can be fetched and previewed from any public git repository (read more about creating custom visualizations below). This means a 
                                    b
                                        | github.com 
                                    |  or 
                                    b
                                        | gist.github.com
                                    | url will work.

                                p
                                    | For example, if I have a custom visualization type at 
                                    a(href="https://gist.github.com/mathisonian/77853979c58be91eb13c")
                                        | https://gist.github.com/mathisonian/77853979c58be91eb13c
                                    | , then I am able to preview this visualization simply by entering the url.


                                .screenshot
                                    img(src="/images/screenshots/10.gif")

                                p
                                    | If you like this visualization, and would like to use it with lightning, click the import button:


                                .screenshot
                                    img(src="/images/screenshots/11.png")
                                p

                                p
                                    | this can then be used, e.g. from the python client like:

                                pre
                                    code.
                                        lgn.plot(type="imported-viz", data=my_data)
                section
                    .row
                        .column-12
                                
                                a(name="custom", href="#custom")
                                    h2    
                                        | Developing Custom Plots

                                p
                                    | In addition to Lightning’s core visualization types, users can easily develop their own plots, either by modifying the existing ones, or designing visualizations from scratch. This section serves as a walkthrough to create a custom visualization.

                                p
                                    | A visualization consists of a folder containing several files:

                                    ul.styled
                                        li
                                            | index.js (required) - the main javascript file, responsible for building and displaying the visualization
                                        li
                                            | sample-data.json / sample-images.json (required) - sample data to be used when previewing this visualization type

                                        li
                                            | style.scss (optional) - optional scss styles to be applied

                                        li
                                            | template.jade (optional) - a markup file for any html that is needed


                                p
                                    | each of these are discussed in detail below.


                                a(name="custom-index", href="#custom-index")
                                    h4
                                        | index.js

                                p
                                    | The `index.js` file must export a javascript object that exposes a few basic functions. In general the template for the index.js file looks like this (using common.js syntax):

                                pre
                                    code.javascript.
                                        /*
                                         * Import any necessary libraries. All visualizations already have access to jQuery
                                         * through $
                                         */
                                        var d3 = require(‘d3’);
                                        var _ = require(‘lodash’);


                                        /*
                                         * Initialize a new visualization and call the internal _init function
                                         */
                                        var MyCustomViz = function(selector, data, images, opts) {
                                            this.opts = opts || {};

                                            this.width = (opts.width || $(selector).width()) - margin.left - margin.right;
                                            this.height = (opts.height || (this.width * 0.6)) - margin.top - margin.bottom;

                                            this.data = this._formatData(data);
                                            this.selector = selector;
                                            this._init();
                                        };

                                        /*
                                         * Initialize the visualization. This is kept separate by convention to make it easy
                                         * to inherit from other visualization types.
                                         */
                                        MyCusomViz._init = function() {
                                            // draw the actual visualization here
                                            // e.g.
                                            var svg = d3.select(this.selector)
                                                    .append(‘svg:svg’)
                                            
                                            // etc.
                                        }

                                        /*
                                         * Take the provided data and return it in whatever data format is needed
                                         */
                                        MyCusomViz._formatData = function(data) {
                                           var transformedData = data;

                                           // …
                                           // transform the data into whatever form you need here
                                           // …
                                           
                                            return transformedData;
                                           
                                        }

                                        /*
                                         * Optional function, use this if you want to users to send updated data to this plot
                                         */
                                        MyCusomViz.updateData = function(data) {
                                            this.data = this._formatData(data);
                                            // then update the visualization
                                        }

                                        /*
                                         * Optional function, use this if you want to enable streaming updates to this plot
                                         */
                                        MyCusomViz.appendData = function(data) {
                                            this.data = this.data.concat(this._formatData(data));
                                            // then update the visualization
                                        }


                                        module.exports = MyCustomViz;


                                a(name="custom-data", href="#custom-data")
                                    h4
                                        | sample-data.json

                                p
                                    | This is simply a json file that contains an array of example data in the required format, e.g.

                                pre
                                    code.
                                        [{
                                            “name”: “first example data set”,
                                            “data”: {/* json representation of your data*/}
                                        }, {
                                           “name”: “second example data set”,
                                            “data”: {/* json representation of your data*/}
                                        }]


                                a(name="custom-image", href="#custom-images")
                                    h4
                                        | sample-images.json

                                p
                                    | If your plot displays images, create this file, and fill it with an array of test image URLs, e.g.

                                pre
                                    code.
                                        [
                                            "http://i.gif.fm/janelia-images/stack/0000",
                                            "http://i.gif.fm/janelia-images/stack/0001",
                                            "http://i.gif.fm/janelia-images/stack/0002",
                                            "http://i.gif.fm/janelia-images/stack/0003"
                                        ]

                                a(name="custom-style", href="#custom-style")
                                    h4
                                        | style.scss

                                p
                                    | An SCSS file for any styles that you wish to be applied to your visualization. The current version does not automatically scope this, so you should be careful to scope it to only your visualizations:

                                pre
                                    code.
                                        .my-visualization-class {
                                            path {
                                                stroke: black;
                                            }
                                            // etc.
                                        }

                                
                                a(name="custom-template", href="#custom-template")
                                    h4
                                        | template.jade

                                p
                                    | This is a jade file that can be required in index.js. For example, the gallery visualization has a markdown file that looks like

                                pre
                                    code.
                                        .gallery-viz
                                            .row
                                                .gallery-container
                                                    for image in images
                                                        .gallery-thumbnail
                                                            img(src="#{image}_small")

                                            .row
                                                .gallery-full
                                                    .image-container

                                p
                                    | then in index.js 
                                pre
                                    code.
                                        var markup = require(‘./template.jade’);
                                        var templateVars = {};
                                        var compiledHTML = markup();

                                        // the compiledHTML can then be appended to the visualization

                                
                                a(name="custom-link", href="#custom-link")
                                    h4
                                        | Linking Plot Types

                                p
                                    | Lightning’s plots are designed so that several visualization types can be linked together relatively easily. For example, the following code shows how the relevant parts of how the “scatter-line” type to builds a visualization containing both a line plot and a scatter plot. The line plot updates with new data every time a user hovers on a point in the scatter plot.

                                pre
                                    code.

                                        var ScatterLine = function(selector, data, images, options) {

                                            var Scatter = require('../viz/scatter');
                                            var scatter = new Scatter(selector + ' #scatter-plot', data, null, {width: $(selector).width(), height: Math.min(500, $(selector).width * 0.6)});
                                            var Line = require('../viz/line');
                                            var line = new Line(selector + ' #line-plot');

                                            // ...


                                            scatter.on('hover', function(d) {
                                                // ...
                                                // get newData
                                                // ... 

                                                line.updateData(newdata);   
                                            });
                                        };

                                        module.exports = ScatterLine;

                                p
                                    | the lightning-client-utils module provides several utility functions, e.g. pulling new data down from the server. This is discussed more in a later section.


                                a(name="custom-inherit", href="#custom-inherit")
                                    h4
                                        | Inheriting from other plot types

                                p
                                    | To inherit behavior from an existing plot, the following convention is used:

                                pre
                                    code.
                                        var inherits = require('inherits');
                                        var SomeExistingPlot = require(‘../viz/some-existing-plot’);

                                        var MyInheritingPlot = funtion(selector, data, images, opts) {
                                            this.opts = opts || {};

                                            this.width = (opts.width || $(selector).width()) - margin.left - margin.right;
                                            this.height = (opts.height || (this.width * 0.6)) - margin.top - margin.bottom;

                                            this.data = this._formatData(data);
                                            this.selector = selector;
                                            this._init();
                                        }

                                        inherits(MyInheritingPlot, SomeExistingPlot);

                                        // now override any methods you wish to change
                                        // e.g.

                                        MyInheritingPlot.prototype.appendData = function(data) {
                                            var newData = this._formatData(data);
                                            // now do something different with the data
                                        }


                                
                                //- a(name="custom-utils", href="#custom-utils")
                                //-     h4
                                //-         | lightning-client-utils

                                //- p
                                //-     | The lightning client utilities module exposes a few useful functions for interacting with the lightning server from the browser.



    .bottom.bar.visible-mobile